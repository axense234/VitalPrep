version: "3.8"
services:
  client:
    image: vitalprep-client:latest
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"
    depends_on:
      server:
        condition: service_healthy
    environment:
      - NEXT_PUBLIC_RECAPTCHA_SITE_KEY=${NEXT_PUBLIC_RECAPTCHA_SITE_KEY}
      - NEXT_PUBLIC_TESTING_CLIENT_SITE_URL=${NEXT_PUBLIC_TESTING_CLIENT_SITE_URL}
      - NEXT_PUBLIC_PRODUCTION_CLIENT_SITE_URL=${NEXT_PUBLIC_PRODUCTION_CLIENT_SITE_URL}
      - NEXT_PUBLIC_TESTING_SERVER_SITE_URL=${NEXT_PUBLIC_TESTING_SERVER_SITE_URL}
      - NEXT_PUBLIC_PRODUCTION_SERVER_SITE_URL=${NEXT_PUBLIC_PRODUCTION_SERVER_SITE_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - NEXT_PUBLIC_ADMIN_USE_UNIQUE_IDENTIFIER=${NEXT_PUBLIC_ADMIN_USE_UNIQUE_IDENTIFIER}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - NEXT_PUBLIC_CLOUDINARY_UPLOAD_IMAGE_URL=${NEXT_PUBLIC_CLOUDINARY_UPLOAD_IMAGE_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXT_PUBLIC_ONE_SIGNAL_APP_ID=${NEXT_PUBLIC_ONE_SIGNAL_APP_ID}
      - NEXT_PUBLIC_REST_API_KEY=${NEXT_PUBLIC_REST_API_KEY}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${CLIENT_PORT} || exit 1"]
  server:
    image: vitalprep-server:latest
    restart: always
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_db:
        condition: service_healthy
    command: sh -c 'npx prisma migrate dev && npx prisma generate && npm run dev'
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_INSTANCE_URL=${REDIS_INSTANCE_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_EXP_TIME=${JWT_EXP_TIME}
      - ADMINER_PORT=${ADMINER_PORT}
      - MAX_RATE_LIMIT=${MAX_RATE_LIMIT}
      - ADMIN_USE_UNIQUE_IDENTIFIER=${ADMIN_USE_UNIQUE_IDENTIFIER}
      - CORS_TESTING_CLIENT_ORIGIN=${CORS_TESTING_CLIENT_ORIGIN}
      - CORS_PRODUCTION_CLIENT_ORIGIN=${CORS_PRODUCTION_CLIENT_ORIGIN}
      - REDIS_CACHE_EXP_TIME=${REDIS_CACHE_EXP_TIME}
      - ADMIN_PRIVILEGES_SECRET=${ADMIN_PRIVILEGES_SECRET}
      - REDIS_COMMANDER_PORT=${REDIS_COMMANDER_PORT}
      - PORT=${PORT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:${SERVER_PORT}/health || exit 1",
        ]
      interval: 5s
      retries: 10

  postgres_db:
    image: postgres:latest
    ports:
      - "${PGPORT}:${PGPORT}"
    environment:
      - POSTGRES_USER=${PGUSERNAME}
      - POSTGRES_PASSWORD=${PGPASSWORD}
      - POSTGRES_DB=${PGDATABASE}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSERNAME}"]
      interval: 5s
      retries: 3

  redis_db:
    image: redis:latest
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    hostname: redis-commander
    restart: always
    environment:
      - REDIS_HOSTS=local:${REDIS_HOST}:${REDIS_PORT}:0:${REDIS_PASSWORD}
    ports:
      - "${REDIS_COMMANDER_PORT}:${REDIS_COMMANDER_PORT}"

  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "${ADMINER_PORT}:${ADMINER_PORT}"

volumes:
  postgres_data:
